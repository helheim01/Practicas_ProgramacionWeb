<?xml version="1.0" encoding="UTF-8"?>
<!--
WEB.XML AVANZADO: Configuración completa de aplicación web Java

Este archivo es más avanzado que los anteriores porque incluye:
- Parámetros de inicialización (init-param y context-param)
- Configuración de sesiones
- Páginas de error personalizadas
- Múltiples archivos de bienvenida
-->

<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
                             http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!--
    DISPLAY-NAME: Nombre descriptivo de la aplicación
    - Aparece en herramientas de administración de Tomcat
    - NO afecta las URLs ni funcionamiento
    - Es solo para identificar la aplicación en el manager de Tomcat
    - En proyectos anteriores no lo usamos porque era opcional
    - Aquí lo incluimos para demostrar configuración más profesional
    -->
    <display-name>ServletConfig</display-name>

    <!--
    SERVLET CON PARÁMETROS DE INICIALIZACIÓN:
    
    ¿QUE SON LOS INIT-PARAM?
    - Parámetros específicos SOLO para este servlet
    - Son como "configuraciones privadas" de cada servlet
    - Se cargan cuando Tomcat inicializa el servlet por primera vez
    - Útiles para configurar comportamiento sin modificar código Java
    
    ¿COMO SE USAN EN JAVA?
    String config = getServletConfig().getInitParameter("config");
    -->

    <!--PRIMER SERVLET -->
    <servlet>
        <servlet-name>MiServlet</servlet-name>
        <servlet-class>com.example.ServletConfig.MiServlet</servlet-class>
        
        <!-- Primer parámetro que solo puede leer MiServlet -->
        <init-param>
            <param-name>config</param-name>
            <param-value>Hola desde MiServlet configurado en web.xml</param-value>
        </init-param>
        
        <!-- Segundo parámetro específico de MiServlet -->
        <init-param>
            <param-name>version</param-name>
            <param-value>1.0</param-value>
        </init-param>
    </servlet>

    <servlet-mapping>
        <servlet-name>MiServlet</servlet-name>
        <url-pattern>/miservlet</url-pattern>
    </servlet-mapping>


    <!--
    SERVLET SIN PARÁMETROS DE INICIALIZACIÓN:
    
    ¿POR QUE NO TIENE INIT-PARAM?
    - Este servlet usa anotaciones Java en lugar de configuración XML
    - Los parámetros están definidos en el código Java con @WebServlet
    - Es una forma más moderna de configurar servlets
    - Demuestra que hay dos formas: XML o anotaciones
    -->

    <!--SEGUNDO SERVLET -->
    <servlet>
        <servlet-name>MiServletAnotado</servlet-name>
        <servlet-class>com.example.ServletConfig.MiServletAnotado</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>MiServletAnotado</servlet-name>
        <url-pattern>/anotado</url-pattern>
    </servlet-mapping>


    <!--
    PARÁMETROS GLOBALES DE APLICACIÓN: Parámetros disponibles para TODOS los servlets de la aplicación
    
    ¿COMO SE USAN EN JAVA?
    String config = getServletContext().getInitParameter("config");
    
    EJEMPLO PRÁCTICO:
    - context-param: configurar URL de base de datos (todos la necesitan)
    - init-param: configurar página de error específica de un servlet
    -->

    <context-param>
        <param-name>config</param-name>
        <param-value>desde el Servlet Config</param-value>
    </context-param>

    <context-param>
        <param-name>version</param-name>
        <param-value>1.0</param-value>
    </context-param>

    <!--
    ARCHIVOS DE BIENVENIDA:
    ¿POR QUE DOS ARCHIVOS? Tomcat los busca EN ORDEN: primero index.html, luego index.jsp
    - Si encuentra index.html, lo muestra y no busca index.jsp. Si no encuentra index.html, busca index.jsp
    -->
    <welcome-file-list>
        <welcome-file>index.html</welcome-file>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>

    <!--
    CONFIGURACIÓN DE SESIONES:
    
    ¿QUE ES SESSION-TIMEOUT? Tiempo en MINUTOS que una sesión HTTP permanece activa sin actividad
    - Después de 30 minutos sin hacer requests, la sesión expira, y los datos almacenados en sesión se pierden
    - Libera memoria del servidor
    - Mejora seguridad (sesiones no quedan abiertas indefinidamente)
    -->

    <session-config>
        <session-timeout>30</session-timeout>
    </session-config>

    <!--
    PÁGINAS DE ERROR PERSONALIZADAS: Páginas HTML personalizadas que se muestran cuando ocurre un error
    ERRORES COMUNES:
    - 404: página no encontrada (URL incorrecta)
    - 500: error interno del servidor (excepción en servlet)
    -->
    
    <!-- Si usuario va a URL que no existe, muestra esta página -->
    <error-page>
        <error-code>404</error-code>
        <location>/error/404.html</location>
    </error-page>

    <!-- Si hay excepción no manejada en servlet, muestra esta página -->
    <error-page>
        <error-code>500</error-code>
        <location>/error/500.html</location>
    </error-page>

</web-app>